name: Release Warp-iOS

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
      confirm_branch:
        description: 'Are you sure you want to release from a branch other than main?'
        required: false
        type: boolean
        default: false

jobs:
  pre_check:
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.branch_check.outputs.proceed }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Check if branch is main
        id: branch_check
        run: |
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          if [ "$CURRENT_BRANCH" != "main" ]; then
            if [ "${{ github.event.inputs.confirm_branch }}" != 'true' ]; then
              echo "You are attempting to release from the '$CURRENT_BRANCH' branch instead of 'main'."
              echo "Please confirm by setting 'confirm_branch' to 'true' when running the workflow."
              exit 1
            fi
          fi
          echo "::set-output name=proceed::true"

  bump_version:
    runs-on: ubuntu-latest
    needs: pre_check
    if: needs.pre_check.outputs.proceed == 'true'
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Increment version
        run: |
          npm install -g standard-version
          standard-version --release-as ${{ github.event.inputs.release_type }}

  update_sampleapp_version:
    runs-on: ubuntu-latest
    needs: [pre_check, bump_version]
    if: needs.pre_check.outputs.proceed == 'true'
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Update SampleApp version
        run: |
          NEW_VERSION=$(node -p "require('./package.json').version")
          # Update the SampleApp version to $NEW_VERSION
          sed -i '' "s/Version:.*/Version: $NEW_VERSION/" path/to/SampleApp/config.plist
      - name: Commit SampleApp version update
        run: |
          git add path/to/SampleApp/config.plist
          git commit -m "Update SampleApp version to $NEW_VERSION"
          git push

  create_release:
    runs-on: ubuntu-latest
    needs: [pre_check, bump_version, update_sampleapp_version]
    if: needs.pre_check.outputs.proceed == 'true'
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME=$(git describe --tags `git rev-list --tags --max-count=1`)
          git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"%h - %s" > release_notes.txt
          gh release create $TAG_NAME --title "$TAG_NAME" --notes-file release_notes.txt

  build_and_deploy:
    runs-on: macos-latest
    needs: create_release
    if: needs.pre_check.outputs.proceed == 'true'
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Firebase CLI
        run: |
          curl -sL https://firebase.tools | bash
          firebase login:ci --token ${{ secrets.FIREBASE_TOKEN }}

      - name: Build and Deploy Warp-iOS
        run: |
          xcodebuild -workspace warp-ios.xcworkspace -scheme "Warp-iOS" -configuration Release archive -archivePath $PWD/build/warp-ios.xcarchive
          xcodebuild -exportArchive -archivePath $PWD/build/warp-ios.xcarchive -exportPath $PWD/build -exportOptionsPlist path/to/exportOptions.plist

          firebase appdistribution:distribute $PWD/build/warp-ios.ipa \
            --app ${{ secrets.FIREBASE_APP_ID }} \
            --token ${{ secrets.FIREBASE_TOKEN }} \
            --release-notes "Released via GitHub Action"
